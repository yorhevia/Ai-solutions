<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI Finance Solutions - Perfil de Cliente</title>
    <link rel="stylesheet" href="/stylesheets/perfil_cliente.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <link rel="stylesheet" href="/stylesheets/client_navbar.css">
</head>
<body>
    <%- include('../partials/client_navbar') %>

    <div id="globalMessage" class="success-message"></div>

    <div class="page-content-wrapper">

        <div class="container profile-container">
            <section class="profile-photo-section">
                <div class="profile-picture-wrapper">
                    <img id="profilePictureDisplay" src="<%= (user && user.fotoPerfilUrl) || '/images/default-profile.png' %>" alt="Foto de Perfil">
                </div>
                <input type="file" id="profilePictureUpload" accept="image/*" style="display: none;">
                <label for="profilePictureUpload" class="upload-button">
                    <i class="fas fa-upload"></i> Subir Foto de Perfil
                </label>
                <span id="uploadMessage" class="upload-message">Por favor, sube una foto formal y clara de perfil. **Recomendado: 250px de ancho y 333px de alto.**</span>
                <p id="profilePictureErrorMessage" class="error-message" style="display: none;"></p>
            </section>

            <section class="profile-info">
                <h2>Información Personal</h2>
                <div class="info-item">
                    <i class="fas fa-user icon"></i>
                    <span>Nombre Completo:</span>
                    <span class="value" id="displayNombre"><%= (user && user.nombre) || '' %></span>
                    <span class="value" id="displayApellido"><%= (user && user.apellido) || '' %></span>
                </div>
                <div class="info-item">
                    <i class="fas fa-envelope icon"></i>
                    <span>Correo Electrónico:</span>
                    <span class="value" id="displayEmail"><%= (user && user.email) || '' %></span>
                </div>
                <div class="info-item">
                    <i class="fas fa-phone icon"></i>
                    <span>Teléfono:</span>
                    <span class="value" id="displayTelefono"><%= (user && user.telefono) || '' %></span>
                </div>
                <% if (user && user.direccion) { %>
                <div class="info-item optional">
                    <i class="fas fa-map-marker-alt icon"></i>
                    <span>Dirección:</span>
                    <span class="value" id="displayDireccion"><%= (user && user.direccion) || '' %></span>
                </div>
                <% } %>
                <a href="#" id="editPersonalLink" class="edit-link" style="margin-top: 15px;">
                    <i class="fas fa-edit"></i> Editar Información Personal
                </a>
            </section>

            <div id="editPersonalCard" class="edit-card">
                <h3>Editar Información Personal</h3>
                <p id="editPersonalErrorMessage" class="error-message" style="display: none;"></p>
                <form id="editPersonalForm">
                    <div class="form-group">
                        <label for="editNombre">Nombre:</label>
                        <input type="text" id="editNombre" name="nombre" value="<%= (user && user.nombre) || '' %>" required>
                    </div>
                    <div class="form-group">
                        <label for="editApellido">Apellido:</label>
                        <input type="text" id="editApellido" name="apellido" value="<%= (user && user.apellido) || '' %>" required>
                    </div>
                    <div class="form-group">
                        <label for="editEmail">Email:</label>
                        <input type="email" id="editEmail" name="email" value="<%= (user && user.email) || '' %>" required>
                    </div>
                    <div class="form-group">
                        <label for="editTelefono">Teléfono:</label>
                        <input type="tel" id="editTelefono" name="telefono" value="<%= (user && user.telefono) || '' %>">
                    </div>
                    <div class="form-group">
                        <label for="editDireccion">Dirección:</label>
                        <input type="text" id="editDireccion" name="direccion" value="<%= (user && user.direccion) || '' %>">
                    </div>
                    <div class="button-group">
                        <button type="submit" class="save-button">Guardar</button>
                        <button type="button" id="cancelEditPersonalButton" class="cancel-button">Cancelar</button>
                    </div>
                </form>
            </div>

            <section class="financial-info">
                <h2>Información Financiera</h2>
                <div class="info-item">
                    <i class="fas fa-chart-pie icon"></i>
                    <span>Perfil de Riesgo:</span>
                    <span class="value" id="displayPerfilRiesgo"><%= (user && user.perfil_riesgo) || 'No definido' %></span>
                </div>
                <div class="info-item">
                    <i class="fas fa-bullseye icon"></i>
                    <span>Objetivos Principales:</span>
                    <span class="value" id="displayObjetivoPrincipal"><%= (user && user.objetivo_principal) || 'No definido' %></span>
                </div>
                <a href="#" id="editFinancialLink" class="edit-link" style="margin-top: 15px;">
                    <i class="fas fa-edit"></i> Editar Información Financiera
                </a>
            </section>

            <div id="editFinancialCard" class="edit-card">
                <h3>Editar Información Financiera</h3>
                <p id="editFinancialErrorMessage" class="error-message" style="display: none;"></p>
                <form id="editFinancialForm">
                    <section>
                        <h3>Objetivos Financieros Iniciales</h3>
                        <div class="form-group">
                            <label for="editObjetivoPrincipal">Mi objetivo financiero principal es:</label>
                            <select id="editObjetivoPrincipal" name="objetivo_principal">
                                <option value="">-- Seleccionar --</option>
                                <option value="Planificación para la jubilación" <%= (user && user.objetivo_principal === 'Planificación para la jubilación') ? 'selected' : '' %>>Planificación para la jubilación</option>
                                <option value="Compra de una vivienda" <%= (user && user.objetivo_principal === 'Compra de una vivienda') ? 'selected' : '' %>>Compra de una vivienda</option>
                                <option value="Educación de mis hijos" <%= (user && user.objetivo_principal === 'Educación de mis hijos') ? 'selected' : '' %>>Educación de mis hijos</option>
                                <option value="Inversión a largo plazo" <%= (user && user.objetivo_principal === 'Inversión a largo plazo') ? 'selected' : '' %>>Inversión a largo plazo</option>
                                <option value="Inversión a corto plazo" <%= (user && user.objetivo_principal === 'Inversión a corto plazo') ? 'selected' : '' %>>Inversión a corto plazo</option>
                                <option value="Otro" <%= (user && user.objetivo_principal && !['Planificación para la jubilación', 'Compra de una vivienda', 'Educación de mis hijos', 'Inversión a largo plazo', 'Inversión a corto plazo'].includes(user.objetivo_principal)) ? 'selected' : '' %>>Otro</option>
                            </select>
                        </div>
                        <div class="form-group" id="otro_objetivo_div" style="display: none;">
                            <label for="otro_objetivo">Especifica tu otro objetivo:</label>
                            <input type="text" id="otro_objetivo" name="otro_objetivo" value="<%= (user && user.objetivo_principal && !['Planificación para la jubilación', 'Compra de una vivienda', 'Educación de mis hijos', 'Inversión a largo plazo', 'Inversión a corto plazo'].includes(user.objetivo_principal)) ? user.objetivo_principal : '' %>">
                        </div>
                    </section>

                    <section>
                        <h3>Perfil de Riesgo</h3>
                        <p>¿Cómo te sientes con la posibilidad de que tus inversiones suban o bajen de valor?</p>
                        <div class="form-group radio-group">
                            <input type="radio" id="riesgo_conservador" name="perfil_riesgo" value="Conservador" <%= (user && user.perfil_riesgo === 'Conservador') ? 'checked' : '' %>>
                            <label for="riesgo_conservador">Prefiero inversiones seguras con bajo riesgo.</label>
                        </div>
                        <div class="form-group radio-group">
                            <input type="radio" id="riesgo_moderado" name="perfil_riesgo" value="Moderado" <%= (user && user.perfil_riesgo === 'Moderado') ? 'checked' : '' %>>
                            <label for="riesgo_moderado">Estoy dispuesto a asumir un riesgo moderado para obtener mayores rendimientos.</label>
                        </div>
                        <div class="form-group radio-group">
                            <input type="radio" id="riesgo_agresivo" name="perfil_riesgo" value="Agresivo" <%= (user && user.perfil_riesgo === 'Agresivo') ? 'checked' : '' %>>
                            <label for="riesgo_agresivo">Busco el mayor rendimiento posible y estoy dispuesto a asumir un riesgo alto.</label>
                        </div>
                    </section>

                    <div class="button-group">
                        <button type="submit" class="save-button">Guardar</button>
                        <button type="button" id="cancelEditFinancialButton" class="cancel-button">Cancelar</button>
                    </div>
                </form>
            </div>

            <section class="security-settings">
                <h2>Seguridad</h2>
                <div class="info-item">
                    <i class="fas fa-key icon"></i>
                    <span>Contraseña:</span>
                    <span class="value">*********</span>
                    <a href="/cliente/cambiar_password" class="edit-link"><i class="fas fa-edit"></i> Cambiar</a>
                </div>
            </section>

            <section class="additional-info">
                <h2>Información Adicional</h2>
                <div class="info-item">
                    <i class="fas fa-calendar-alt icon"></i>
                    <span>Fecha de Registro:</span>
                    <span class="value"><%= (user && user.formattedCreatedAt) || 'Fecha de registro no disponible' %></span>
                </div>
                <% if (user && user.asesorAsignado) { %>
                <div class="info-item optional">
                    <i class="fas fa-user-tie icon"></i>
                    <span>Asesor Asignado:</span>
                    <span class="value"><%= (nombreAsesor || 'No asignado') %></span> 
                </div>
                <% } %>
            </section>
        </div>

    </div> 

   <%- include('../partials/footer') %>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Eliminar o comentar todo el bloque de script que intentaba formatear la fecha de registro en el cliente.
            // Si hay otros scripts que dependen de Moment.js, puedes mantener el CDN de Moment.js,
            // pero el bloque específico de formateo de fecha que me mostraste debe irse.
            
            // --- RESTO DE TU SCRIPT DE JAVASCRIPT ---
            const globalMessage = document.getElementById('globalMessage');
            let messageTimeout;

            function showMessage(element, message, isSuccess = true, duration = 5000) {
                clearTimeout(messageTimeout);
                if (element) {
                    element.textContent = message;
                    element.className = isSuccess ? 'success-message show' : 'error-message show';
                    element.style.display = 'block';
                }

                messageTimeout = setTimeout(() => {
                    if (element) {
                        element.classList.remove('show');
                        setTimeout(() => {
                            element.style.display = 'none';
                        }, 500);
                    }
                }, duration);
            }

            const editPersonalLink = document.getElementById('editPersonalLink');
            const editPersonalCard = document.getElementById('editPersonalCard');
            const cancelEditPersonalButton = document.getElementById('cancelEditPersonalButton');
            const editPersonalForm = document.getElementById('editPersonalForm');
            const editPersonalErrorMessage = document.getElementById('editPersonalErrorMessage');

            const editFinancialLink = document.getElementById('editFinancialLink');
            const editFinancialCard = document.getElementById('editFinancialCard'); 
            const cancelEditFinancialButton = document.getElementById('cancelEditFinancialButton');
            const editFinancialForm = document.getElementById('editFinancialForm');
            const editFinancialErrorMessage = document.getElementById('editFinancialErrorMessage');
            const editObjetivoPrincipalSelect = document.getElementById('editObjetivoPrincipal');
            const otroObjetivoDiv = document.getElementById('otro_objetivo_div');
            const otroObjetivoInput = document.getElementById('otro_objetivo');

            const profilePictureUpload = document.getElementById('profilePictureUpload');
            const profilePictureDisplay = document.getElementById('profilePictureDisplay');
            const uploadMessage = document.getElementById('uploadMessage');
            const profilePictureErrorMessage = document.getElementById('profilePictureErrorMessage');
            const uploadButtonLabel = document.querySelector('.upload-button');

            if (editPersonalLink) {
                editPersonalLink.addEventListener('click', function(event) {
                    event.preventDefault();
                    if (editPersonalCard) editPersonalCard.style.display = 'block';
                    if (editPersonalErrorMessage) editPersonalErrorMessage.style.display = 'none';
                    if (globalMessage) {
                        globalMessage.classList.remove('show');
                        globalMessage.style.display = 'none';
                    }
                    if (editFinancialCard) editFinancialCard.style.display = 'none';
                });
            }

            if (cancelEditPersonalButton) {
                cancelEditPersonalButton.addEventListener('click', function() {
                    if (editPersonalCard) editPersonalCard.style.display = 'none';
                    if (editPersonalErrorMessage) editPersonalErrorMessage.style.display = 'none';
                    if (globalMessage) {
                        globalMessage.classList.remove('show');
                        globalMessage.style.display = 'none';
                    }
                });
            }

            if (editPersonalForm) {
                editPersonalForm.addEventListener('submit', async function(event) {
                    event.preventDefault();

                    const formData = new FormData(editPersonalForm);
                    const data = Object.fromEntries(formData.entries());

                    console.log('Cliente Frontend (Personal): Datos que se enviarán al backend:', data);

                    if (!data.nombre || !data.apellido || !data.email) {
                        showMessage(editPersonalErrorMessage, 'Nombre, apellido y email son obligatorios.', false);
                        return;
                    }

                    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
                    if (!emailRegex.test(data.email)) {
                        showMessage(editPersonalErrorMessage, 'El formato del correo electrónico no es válido.', false);
                        return;
                    }

                    try {
                        const response = await fetch('/cliente/api/actualizar-perfil', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify(data),
                        });

                        console.log('Cliente Frontend (Personal): Respuesta raw del servidor (status, ok):', response.status, response.ok);

                        const result = await response.json();
                        console.log('Cliente Frontend (Personal): Contenido de la respuesta JSON del servidor:', result);

                        if (response.ok) {
                            if (document.getElementById('displayNombre')) document.getElementById('displayNombre').textContent = result.user.nombre;
                            if (document.getElementById('displayApellido')) document.getElementById('displayApellido').textContent = result.user.apellido;
                            if (document.getElementById('displayEmail')) document.getElementById('displayEmail').textContent = result.user.email;
                            if (document.getElementById('displayTelefono')) document.getElementById('displayTelefono').textContent = result.user.telefono;

                            let displayDireccion = document.getElementById('displayDireccion');
                            if (!displayDireccion) {
                                const infoItem = document.createElement('div');
                                infoItem.className = 'info-item optional';
                                infoItem.innerHTML = `<i class="fas fa-map-marker-alt icon"></i><span>Dirección:</span><span class="value" id="displayDireccion"></span>`;
                                const profileInfoSection = document.querySelector('.profile-info');
                                if (profileInfoSection && editPersonalLink && editPersonalLink.parentNode) {
                                    profileInfoSection.insertBefore(infoItem, editPersonalLink.parentNode);
                                }
                                displayDireccion = document.getElementById('displayDireccion');
                            }
                            if (displayDireccion) {
                                displayDireccion.textContent = result.user.direccion || '';
                                if (!result.user.direccion) {
                                    if (displayDireccion.closest('.info-item')) displayDireccion.closest('.info-item').style.display = 'none';
                                } else {
                                    if (displayDireccion.closest('.info-item')) displayDireccion.closest('.info-item').style.display = 'flex';
                                }
                            }

                            if (editPersonalCard) editPersonalCard.style.display = 'none';
                            showMessage(globalMessage, '¡Información personal actualizada con éxito!', true);
                        } else {
                            showMessage(editPersonalErrorMessage, result.message || 'Error al actualizar la información personal.', false);
                        }
                    } catch (error) {
                        console.error('Cliente Frontend (Personal): Error en la solicitud fetch o al procesar la respuesta:', error);
                        showMessage(globalMessage, 'Error de conexión o de red al actualizar información personal. Inténtalo de nuevo.', false);
                    }
                });
            }

            function toggleOtroObjetivo() {
                if (editObjetivoPrincipalSelect && otroObjetivoDiv && otroObjetivoInput) {
                    if (editObjetivoPrincipalSelect.value === 'Otro') {
                        otroObjetivoDiv.style.display = 'block';
                        otroObjetivoInput.setAttribute('required', 'required');
                    } else {
                        otroObjetivoDiv.style.display = 'none';
                        otroObjetivoInput.removeAttribute('required');
                        otroObjetivoInput.value = '';
                    }
                }
            }

            if (editObjetivoPrincipalSelect) {
                toggleOtroObjetivo();
                editObjetivoPrincipalSelect.addEventListener('change', toggleOtroObjetivo);
            }

            if (editFinancialLink) {
                editFinancialLink.addEventListener('click', function(event) {
                    event.preventDefault();
                    if (editFinancialCard) editFinancialCard.style.display = 'block';
                    if (editFinancialErrorMessage) editFinancialErrorMessage.style.display = 'none';
                    if (globalMessage) {
                        globalMessage.classList.remove('show');
                        globalMessage.style.display = 'none';
                    }
                    if (editPersonalCard) editPersonalCard.style.display = 'none';
                    toggleOtroObjetivo();
                });
            }

            if (cancelEditFinancialButton) {
                cancelEditFinancialButton.addEventListener('click', function() {
                    if (editFinancialCard) editFinancialCard.style.display = 'none';
                    if (editFinancialErrorMessage) editFinancialErrorMessage.style.display = 'none';
                    if (globalMessage) {
                        globalMessage.classList.remove('show');
                        globalMessage.style.display = 'none';
                    }
                    toggleOtroObjetivo();
                });
            }

            if (editFinancialForm) {
                editFinancialForm.addEventListener('submit', async function(event) {
                    event.preventDefault();

                    const formData = new FormData(editFinancialForm);
                    const data = Object.fromEntries(formData.entries());

                    if (data.objetivo_principal === 'Otro') {
                        data.objetivo_principal = data.otro_objetivo;
                    }
                    delete data.otro_objetivo;

                    console.log('Cliente Frontend (Financiera): Datos que se enviarán al backend:', data);

                    if (!data.perfil_riesgo) {
                        showMessage(editFinancialErrorMessage, 'Debes seleccionar un perfil de riesgo.', false);
                        return;
                    }
                    if (!data.objetivo_principal || data.objetivo_principal.trim() === '') {
                        showMessage(editFinancialErrorMessage, 'Debes seleccionar un objetivo principal o especificarlo.', false);
                        return;
                    }

                    try {
                        const response = await fetch('/cliente/api/actualizar-info-financiera', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify(data),
                        });

                        console.log('Cliente Frontend (Financiera): Respuesta raw del servidor (status, ok):', response.status, response.ok);

                        const result = await response.json();
                        console.log('Cliente Frontend (Financiera): Contenido de la respuesta JSON del servidor:', result);

                        if (response.ok) {
                            if (document.getElementById('displayPerfilRiesgo')) document.getElementById('displayPerfilRiesgo').textContent = result.user.perfil_riesgo;
                            if (document.getElementById('displayObjetivoPrincipal')) document.getElementById('displayObjetivoPrincipal').textContent = result.user.objetivo_principal;

                            if (editFinancialCard) editFinancialCard.style.display = 'none';
                            showMessage(globalMessage, '¡Información financiera actualizada con éxito!', true);
                        } else {
                            showMessage(editFinancialErrorMessage, result.message || 'Error al actualizar la información financiera.', false);
                        }
                    } catch (error) {
                        console.error('Cliente Frontend (Financiera): Error en la solicitud fetch o al procesar la respuesta:', error);
                        showMessage(globalMessage, 'Error de conexión o de red al actualizar información financiera. Inténtalo de nuevo.', false);
                    }
                });
            }

            if (profilePictureUpload) {
                profilePictureUpload.addEventListener('change', async function() {
                    const file = this.files[0];
                    if (file) {
                        const maxSizeMB = 5;
                        if (file.size > maxSizeMB * 1024 * 1024) {
                            showMessage(profilePictureErrorMessage, `El archivo es demasiado grande. Máximo ${maxSizeMB}MB.`, false);
                            if (uploadMessage) {
                                uploadMessage.classList.remove('show');
                                uploadMessage.style.display = 'none';
                            }
                            return;
                        }

                        const reader = new FileReader();
                        reader.onload = function(e) {
                            if (profilePictureDisplay) profilePictureDisplay.src = e.target.result;
                        };
                        reader.readAsDataURL(file);

                        try {
                            const formData = new FormData();
                            formData.append('profilePhoto', file);

                            showMessage(uploadMessage, 'Subiendo foto...', true, 99999);
                            if (profilePictureErrorMessage) profilePictureErrorMessage.style.display = 'none';

                            const response = await fetch('/cliente/api/upload-profile-photo', {
                                method: 'POST',
                                body: formData
                            });

                            const result = await response.json();

                            if (uploadMessage) {
                                uploadMessage.classList.remove('show');
                                uploadMessage.style.display = 'none';
                            }

                            if (response.ok && result.success) {
                                if (profilePictureDisplay) profilePictureDisplay.src = result.imageUrl;
                                showMessage(globalMessage, '¡Foto de perfil subida y actualizada con éxito!', true);
                            } else {
                                showMessage(profilePictureErrorMessage, result.message || 'Error al subir la foto.', false);
                            }
                        } catch (error) {
                            console.error('Error al subir la foto:', error);
                            if (uploadMessage) {
                                uploadMessage.classList.remove('show');
                                uploadMessage.style.display = 'none';
                            }
                            
                        }
                    }
                });
            }
        });
    </script>
</body>
</html>
