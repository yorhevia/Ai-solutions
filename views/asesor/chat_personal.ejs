<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat Personal - AI Finance Solutions</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <link rel="stylesheet" href="/stylesheets/asesor_navbar.css">
    <link rel="stylesheet" href="/stylesheets/chat_personal.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>
</head>
<body>
    <%- include('../partials/asesor_navbar') %>

    <div class="main-content-wrapper">
        <div class="chat-container">
            <header class="chat-header">
                <h2>Chat Personal</h2>
                <div id="chatHeaderUserName"></div>
            </header>
            <div class="messages-container" id="messagesContainer">
                </div>
            <div class="chat-input-area">
                <input type="text" id="messageInput" placeholder="Escribe tu mensaje...">
                <input type="file" id="fileInput" style="display: none;">
                <button id="attachFileButton" class="icon-button"><i class="fas fa-paperclip"></i></button>
                <button id="sendMessageButton" class="icon-button"><i class="fas fa-paper-plane"></i></button>
                <button id="videoCallButton" class="icon-button"><i class="fas fa-video"></i></button>
            </div>
        </div>
    </div>

    <div id="videoCallModal" class="modal">
        <div class="modal-content">
            <span class="close-button" id="closeModalButton">&times;</span>
            <div id="jitsiContainer" style="width: 100%; height: 500px;"></div>
        </div>
    </div>

    <div id="messageModal" class="modal">
        <div class="modal-content">
            <span class="close-button" id="closeMessageModalButton">&times;</span>
            <p id="messageModalText"></p>
        </div>
    </div>


    <script src="https://www.gstatic.com/firebasejs/9.6.1/firebase-app-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.6.1/firebase-database-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.6.1/firebase-storage-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.6.1/firebase-auth-compat.js"></script>
    <script src="https://meet.jit.si/external_api.js"></script>
    
    <script>
        // *** RECIBIR DATOS DEL SERVIDOR EJS ***
        // Estas variables globales son pasadas del servidor
        const CURRENT_USER_ID = "<%= userId %>"; // Asegúrate de que 'userId' se esté pasando desde tu ruta Express
        const CURRENT_USER_NAME = "<%= userName %>"; // Asegúrate de que 'userName' se esté pasando desde tu ruta Express
        const DEFAULT_USER_NAME = "Usuario Anónimo"; 

        const firebaseConfig = {
            apiKey: "AIzaSyDCeZL87eWdEXN7mjTbWR8Q0siNlA_Kz-0", // Tu API Key
            authDomain: "ai-finance-solutions.firebaseapp.com",
            databaseURL: "https://ai-finance-solutions-default-rtdb.firebaseio.com",
            projectId: "ai-finance-solutions",
            storageBucket: "ai-finance-solutions.firebasestorage.app",
            messagingSenderId: "515658179519",
            appId: "1:515658179519:web:6e68a37a4a3e8c7fa8770a"
        };

        console.log("Firebase config loaded:", firebaseConfig); // DEP: Confirmar config

        // Declara database y storage AQUÍ, fuera del try-catch
        let database; 
        let storage;

        try {
            firebase.initializeApp(firebaseConfig);
            database = firebase.database(); // Asigna el valor aquí
            storage = firebase.storage();   // Asigna el valor aquí
            console.log("Firebase initialized successfully. Database and Storage instances created."); // DEP: Confirmar inicialización
        } catch (error) {
            console.error("Error initializing Firebase:", error); // DEP: Capturar errores de inicialización
            showGenericMessage("Error al inicializar Firebase. Consulta la consola.");
            // Detener ejecución si Firebase no se inicializa correctamente
            // Podrías considerar no lanzar un error y simplemente deshabilitar la funcionalidad del chat.
            // Para depuración, dejarlo para que el error sea evidente.
            throw new Error("Firebase initialization failed. Check console for details."); 
        }

        // Referencias a elementos del DOM
        const messagesContainer = document.getElementById('messagesContainer');
        const messageInput = document.getElementById('messageInput');
        const sendMessageButton = document.getElementById('sendMessageButton');
        const attachFileButton = document.getElementById('attachFileButton');
        const fileInput = document.getElementById('fileInput');
        const videoCallButton = document.getElementById('videoCallButton');
        const videoCallModal = document.getElementById('videoCallModal');
        const closeModalButton = document.getElementById('closeModalButton');
        const jitsiContainer = document.getElementById('jitsiContainer');
        const chatHeaderUserName = document.getElementById('chatHeaderUserName');

        let jitsiApi = null;

        // Mostrar el nombre del usuario en el encabezado del chat
        chatHeaderUserName.textContent = CURRENT_USER_NAME || DEFAULT_USER_NAME;
        console.log("Current user ID:", CURRENT_USER_ID); // DEP: Confirmar ID de usuario
        console.log("Current user name:", CURRENT_USER_NAME); // DEP: Confirmar nombre de usuario


        // Referencia a la conversación en Firebase Realtime Database
        const chatRef = database.ref('chats/asesor_personal_chat/messages'); 
        console.log("Firebase chat reference set to:", chatRef.toString()); // DEP: Confirmar la ruta de la base de datos

        // Función para añadir mensajes al DOM
        function addMessageToDOM(message) {
            console.log("Attempting to add message to DOM:", message); // DEP: Mensaje que se intenta añadir

            if (!messagesContainer) {
                console.error("messagesContainer element not found!"); // DEP: Verificar si el contenedor existe
                return;
            }

            const messageElement = document.createElement('div');
            messageElement.classList.add('message');

            const senderName = message.senderName || 'Desconocido';
            const isCurrentUser = message.senderId === CURRENT_USER_ID;
            messageElement.classList.add(isCurrentUser ? 'my-message' : 'other-message');

            // Formatear el timestamp usando moment.js
            // Asegúrate de que message.timestamp existe y es un número (epoch time) o un string válido
            const timestamp = moment(message.timestamp).format('HH:mm [|] DD/MM/YYYY'); 

            let contentHTML = `<span class="sender-name">${senderName}</span>`;

            if (message.type === 'text') {
                contentHTML += `<p>${message.text}</p>`;
            } else if (message.type === 'file') {
                const icon = getFileIcon(message.name);
                contentHTML += `<a href="${message.url}" target="_blank" download="${message.name}">
                                    <i class="${icon}"></i> ${message.name}
                                </a>`;
            } else if (message.type === 'video_call_link') {
                contentHTML += `<p>
                                    <i class="fas fa-video"></i>
                                    <a href="${message.url}" target="_blank">¡Únete a la videollamada!</a>
                                </p>`;
            } else {
                console.warn("Unknown message type:", message.type); // DEP: Detectar tipos de mensaje desconocidos
                contentHTML += `<p>Tipo de mensaje no soportado: ${message.type}</p>`;
            }

            messageElement.innerHTML = `
                <div class="message-content">${contentHTML}</div>
                <span class="timestamp">${timestamp}</span>
            `;
            messagesContainer.appendChild(messageElement);
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
            console.log("Message added, scrolling to bottom."); // DEP: Confirmar adición y scroll
        }

        function getFileIcon(fileName) {
            const extension = fileName.split('.').pop().toLowerCase();
            switch (extension) {
                case 'pdf': return 'fas fa-file-pdf';
                case 'doc':
                case 'docx': return 'fas fa-file-word';
                case 'xls':
                case 'xlsx': return 'fas fa-file-excel';
                case 'ppt':
                case 'pptx': return 'fas fa-file-powerpoint';
                case 'jpg':
                case 'jpeg':
                case 'png':
                case 'gif': return 'fas fa-file-image';
                case 'zip':
                case 'rar': return 'fas fa-file-archive';
                case 'mp3':
                case 'wav': return 'fas fa-file-audio';
                case 'mp4':
                case 'mov': return 'fas fa-file-video';
                default: return 'fas fa-file';
            }
        }

        // Cargar mensajes existentes y escuchar nuevos
        console.log("Setting up Firebase child_added listener for chat messages..."); // DEP: Confirmar configuración del listener
        chatRef.on('child_added', (snapshot) => {
            const messageData = snapshot.val();
            console.log("New message snapshot received:", messageData); // DEP: Datos recibidos de Firebase
            if (messageData) {
                addMessageToDOM(messageData);
            } else {
                console.warn("Received empty message snapshot from Firebase."); // DEP: Mensaje vacío
            }
        }, (error) => {
            console.error("Firebase 'child_added' listener error:", error); // DEP: Errores del listener (ej. permisos)
            showGenericMessage("Error al cargar mensajes del chat: " + error.message);
        });

        // Enviar mensaje de texto
        sendMessageButton.addEventListener('click', () => {
            const messageText = messageInput.value.trim();
            if (messageText) {
                console.log("Attempting to send text message:", messageText); // DEP: Mensaje de texto a enviar
                chatRef.push({
                    senderId: CURRENT_USER_ID,
                    senderName: CURRENT_USER_NAME || DEFAULT_USER_NAME,
                    type: 'text',
                    text: messageText,
                    timestamp: firebase.database.ServerValue.TIMESTAMP
                }).then(() => {
                    console.log("Message sent to Firebase successfully."); // DEP: Confirmar envío
                    messageInput.value = '';
                }).catch(error => {
                    console.error("Error sending message to Firebase:", error); // DEP: Errores al escribir en Firebase
                    showGenericMessage('Error al enviar mensaje: ' + error.message);
                });
            } else {
                console.log("Message input is empty, not sending."); // DEP: Input vacío
            }
        });

        // Enviar mensaje al presionar Enter en el input
        messageInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                console.log("Enter key pressed, triggering send message."); // DEP: Tecla Enter
                sendMessageButton.click();
            }
        });

        // Adjuntar archivo
        attachFileButton.addEventListener('click', () => {
            console.log("Attach file button clicked."); // DEP: Clic en adjuntar archivo
            fileInput.click(); // Simula el clic en el input de tipo file
        });

        fileInput.addEventListener('change', (e) => {
            const file = e.target.files[0];
            if (file) {
                console.log("File selected:", file.name, "Size:", file.size); // DEP: Archivo seleccionado
                const storageRef = storage.ref(`chat_files/${file.name}`);
                const uploadTask = storageRef.put(file);

                uploadTask.on('state_changed',
                    (snapshot) => {
                        // Opcional: mostrar progreso de la subida
                        const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
                        console.log('Upload is ' + progress + '% done');
                    },
                    (error) => {
                        console.error('Error uploading file to Firebase Storage:', error); // DEP: Errores al subir
                        showGenericMessage('Error al subir el archivo: ' + error.message);
                    },
                    () => {
                        uploadTask.snapshot.ref.getDownloadURL().then((downloadURL) => {
                            console.log("File uploaded, download URL:", downloadURL); // DEP: URL de descarga
                            chatRef.push({
                                senderId: CURRENT_USER_ID,
                                senderName: CURRENT_USER_NAME || DEFAULT_USER_NAME,
                                type: 'file',
                                name: file.name,
                                url: downloadURL,
                                timestamp: firebase.database.ServerValue.TIMESTAMP
                            }).then(() => {
                                console.log("File message sent to Firebase successfully."); // DEP: Confirmar envío del mensaje de archivo
                            }).catch(error => {
                                console.error("Error sending file message to Firebase Realtime Database:", error); // DEP: Errores al registrar el archivo
                                showGenericMessage('Error al registrar archivo: ' + error.message);
                            });
                        }).catch(error => {
                            console.error("Error getting download URL:", error); // DEP: Errores al obtener URL
                            showGenericMessage('Error al obtener URL del archivo: ' + error.message);
                        });
                    }
                );
            } else {
                console.log("No file selected."); // DEP: No se seleccionó archivo
            }
        });

        // Lógica de Videollamada
        videoCallButton.addEventListener('click', () => {
            console.log("Video call button clicked."); // DEP: Clic en videollamada
            const roomName = `HomeAsesor_${Date.now()}_${CURRENT_USER_ID}`;
            const domain = 'meet.jit.si';

            const options = {
                roomName: roomName,
                width: '100%',
                height: '100%',
                parentNode: jitsiContainer,
                userInfo: {
                    displayName: CURRENT_USER_NAME || DEFAULT_USER_NAME
                },
                configOverwrite: {
                    startWithAudioMuted: false,
                    startWithVideoMuted: false,
                    enableNoAudioDetection: true,
                    enableNoisyMicDetection: true
                },
                interfaceConfigOverwrite: {
                    APP_NAME: 'AI Finance Solutions Video Chat',
                    SHOW_JITSI_WATERMARK: false,
                    SHOW_WATERMARK_FOR_GUESTS: false,
                    TOOLBAR_BUTTONS: [
                        'microphone', 'camera', 'desktop', 'fullscreen',
                        'fodeviceselection', 'hangup', 'profile', 'chat',
                        'etherpad', 'sharedvideo', 'settings', 'raisehand',
                        'videoquality', 'filmstrip', 'tileview', 'toggle-camera',
                        'mute-everyone', 'security', 'feedback', 'stats', 'shortcuts'
                    ],
                }
            };

            jitsiApi = new JitsiMeetExternalAPI(domain, options);
            console.log("JitsiMeetExternalAPI initialized."); // DEP: Jitsi inicializado

            videoCallModal.style.display = 'flex'; // Mostrar el modal

            chatRef.push({
                senderId: CURRENT_USER_ID,
                senderName: CURRENT_USER_NAME || DEFAULT_USER_NAME,
                type: 'video_call_link',
                url: `https://${domain}/${roomName}`,
                timestamp: firebase.database.ServerValue.TIMESTAMP
            }).then(() => {
                console.log("Video call link sent to Firebase successfully."); // DEP: Link enviado
            }).catch(error => {
                console.error("Error sending video call link to Firebase:", error); // DEP: Errores al enviar link
                showGenericMessage('Error al registrar videollamada: ' + error.message);
            });

            jitsiApi.addEventListener('readyToClose', () => {
                console.log("Jitsi call ended, closing modal."); // DEP: Llamada terminada
                closeModalButton.click(); // Cierra el modal cuando la llamada termina
            });
        });

        closeModalButton.addEventListener('click', () => {
            console.log("Close video call modal button clicked."); // DEP: Clic en cerrar modal
            if (jitsiApi) {
                jitsiApi.dispose(); // Limpia la instancia de Jitsi
                jitsiApi = null;
                console.log("Jitsi API disposed."); // DEP: Jitsi liberado
            }
            videoCallModal.style.display = 'none'; // Ocultar el modal
        });

        // Ocultar modal al hacer clic fuera de él
        window.addEventListener('click', (event) => {
            if (event.target === videoCallModal) {
                console.log("Clicked outside video call modal, closing."); // DEP: Clic fuera del modal
                closeModalButton.click();
            }
        });

        // --- Funciones para el Message Modal (errores, etc.) ---
        function showGenericMessage(message) {
            console.warn("Showing generic message:", message); // DEP: Mensaje genérico
            const messageModal = document.getElementById('messageModal');
            const messageModalText = document.getElementById('messageModalText');
            if (messageModal && messageModalText) {
                messageModalText.textContent = message;
                messageModal.style.display = 'flex'; // Usar flex para centrar
            } else {
                console.error("Message modal elements not found!"); // DEP: Error si el modal no existe
                alert(message); // Fallback si el modal no está en el DOM
            }
        }

        const closeMessageModalButton = document.getElementById('closeMessageModalButton');
        if (closeMessageModalButton) {
            closeMessageModalButton.addEventListener('click', () => {
                console.log("Close generic message modal button clicked."); // DEP: Clic en cerrar modal genérico
                const messageModal = document.getElementById('messageModal');
                if (messageModal) {
                    messageModal.style.display = 'none';
                }
            });
        } else {
            console.error("closeMessageModalButton element not found!"); // DEP: Botón de cierre de modal no encontrado
        }

        window.addEventListener('click', (event) => {
            const messageModal = document.getElementById('messageModal');
            if (messageModal && event.target == messageModal) {
                console.log("Clicked outside generic message modal, closing."); // DEP: Clic fuera del modal genérico
                messageModal.style.display = 'none';
            }
        });
    </script>
</body>
</html>