<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat de Asesor</title>
    <link rel="stylesheet" href="/stylesheets/chat_general_asesor.css">
</head>
<body>
    <%- include('../partials/asesor_navbar', { userName: user.nombre || 'Asesor', currentPage: 'chat' }) %>

    <div class="main-container">
        <div class="sidebar">
            <div class="sidebar-header">Mis Clientes</div>
            <div id="clientList">
                <% if (clientesParaSidebar && clientesParaSidebar.length > 0) { %>
                    <% clientesParaSidebar.forEach(cliente => { %>
                        <div class="client-item" data-client-id="<%= cliente.id %>">
                            <img src="<%= cliente.fotoPerfilUrl %>" alt="<%= cliente.nombre %>">
                            <div class="client-info">
                                <div class="client-name"><%= cliente.nombre %> <%= cliente.apellido %></div>
                                <div class="last-message"><%= cliente.lastMessage %></div>
                            </div>
                            <% if (cliente.unreadCount > 0) { %>
                                <span class="unread-badge" id="badge-<%= cliente.id %>"><%= cliente.unreadCount %></span>
                            <% } %>
                        </div>
                    <% }); %>
                <% } else { %>
                    <p style="text-align: center; font-size: 0.9em; color: #888;">No tienes clientes asignados.</p>
                <% } %>
            </div>
        </div>

        <div class="chat-area">
            <% if (initialChatCliente) { %>
                <div class="chat-header" id="chatHeader">
                    <div class="cliente-info-header">
                        <img src="<%= initialChatCliente.fotoPerfilUrl %>" alt="<%= initialChatCliente.nombre %>">
                        <h4 id="chatClientName">Cliente: <%= initialChatCliente.nombre %> <%= initialChatCliente.apellido %></h4>
                    </div>
                </div>
                <div class="chat-messages" id="chatMessages">
                    <% initialChatMessages.forEach(message => { %>
                        <div class="message-bubble <%= message.senderId === asesor.id ? 'message-sent-asesor' : 'message-received-cliente' %>"
                             data-message-id="<%= message.senderId %>-<%= new Date(message.timestamp).getTime() %>">
                            <%= message.text %>
                            <div class="message-timestamp">
                                <%= message.timestamp.toLocaleTimeString('es-ES', { hour: '2-digit', minute: '2-digit' }) %>
                            </div>
                        </div>
                    <% }); %>
                    <% if (initialChatMessages.length === 0) { %>
                        <div class="message-bubble message-received-cliente" data-message-id="initial-<%= new Date().getTime() %>">
                            ¡Hola <%= asesor.nombre %>! ¿Cómo puedo ayudarte con tus finanzas hoy?
                            <div class="message-timestamp">Ahora</div>
                        </div>
                    <% } %>
                </div>
                <div class="chat-input" id="chatInputArea">
                    <textarea id="messageInput" placeholder="Escribe tu mensaje..." rows="1"></textarea>
                    <button id="sendMessageBtn">Enviar</button>
                </div>
            <% } else { %>
                <div class="no-client-selected">
                    <h2>Selecciona un cliente para chatear</h2>
                    <p>Haz clic en un cliente de la lista para iniciar una conversación.</p>
                </div>
            <% } %>
        </div>
    </div>

    <div class="back-to-home-btn-container">
        <a href="/homeasesor" class="back-to-home-btn">Volver al Inicio</a>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const asesorId = "<%= asesor.id %>";
            console.log('Asesor ID en frontend:', asesorId);

            const clientListDiv = document.getElementById('clientList');
            const chatHeader = document.getElementById('chatHeader');
            const chatMessagesDiv = document.getElementById('chatMessages');
            const messageInput = document.getElementById('messageInput');
            const sendMessageBtn = document.getElementById('sendMessageBtn');
            const chatInputArea = document.getElementById('chatInputArea');

            let currentChatClientId = "<%= initialChatCliente ? initialChatCliente.id : '' %>";

            // Usamos un Set para almacenar los IDs de mensajes que ya están en el DOM
            // El ID será: `${senderId}-${timestamp_en_milisegundos}`
            const displayedMessageIds = new Set();

            // Rellenar displayedMessageIds con los mensajes iniciales ya presentes en el DOM
            document.querySelectorAll('.chat-messages .message-bubble').forEach(bubble => {
                displayedMessageIds.add(bubble.dataset.messageId);
            });

            const autoResizeTextarea = () => {
                if (messageInput) {
                    messageInput.style.height = 'auto';
                    messageInput.style.height = messageInput.scrollHeight + 'px';
                }
            };
            if (messageInput) {
                messageInput.addEventListener('input', autoResizeTextarea);
            }

            // Función para obtener un ID único para un mensaje en el DOM
            function getUniqueMessageId(message) {
                // Asegúrate de que message.timestamp sea un objeto Date o un string parseable
                const timestampValue = message.timestamp instanceof Date ? message.timestamp.getTime() : new Date(message.timestamp).getTime();
                return `${message.senderId}-${timestampValue}`;
            }

            // Función para añadir un mensaje al chat (con verificación de duplicados)
            function addMessageToChat(message) {
                if (!chatMessagesDiv) return;

                const uniqueId = getUniqueMessageId(message);

                // ¡VERIFICACIÓN CLAVE DE DUPLICADOS!
                if (displayedMessageIds.has(uniqueId)) {
                    // console.log('Mensaje ya existe en el DOM, evitando duplicación:', uniqueId);
                    return; // El mensaje ya está en el DOM, no lo agregues de nuevo
                }

                const messageBubble = document.createElement('div');
                messageBubble.classList.add('message-bubble');
                messageBubble.setAttribute('data-message-id', uniqueId); // Establece el ID único
                displayedMessageIds.add(uniqueId); // Añade el ID al Set de mensajes mostrados

                // Determina si el mensaje fue enviado por el asesor o recibido de un cliente
                if (message.senderId === asesorId) {
                    messageBubble.classList.add('message-sent-asesor');
                } else {
                    messageBubble.classList.add('message-received-cliente');
                }

                // Asegúrate de que el timestamp sea un objeto Date
                const timestampDate = message.timestamp ? new Date(message.timestamp) : new Date();

                messageBubble.innerHTML = `
                    <span class="message-text">${message.text}</span>
                    <div class="message-timestamp">
                        ${timestampDate.toLocaleTimeString('es-ES', { hour: '2-digit', minute: '2-digit' })}
                    </div>
                `;
                chatMessagesDiv.appendChild(messageBubble);
            }

            // Función para cargar los mensajes de un cliente específico
            async function loadChat(clientId) {
                if (!clientId) return;

                // Limpiar displayedMessageIds para el nuevo chat
                displayedMessageIds.clear();
                chatMessagesDiv.innerHTML = '<div style="text-align: center; padding: 20px;">Cargando mensajes...</div>';
                if (chatInputArea) chatInputArea.style.display = 'flex';

                currentChatClientId = clientId;

                document.querySelectorAll('.client-item').forEach(item => {
                    item.classList.remove('active');
                    if (item.dataset.clientId === clientId) {
                        item.classList.add('active');
                        const clientImg = item.querySelector('img').src;
                        const clientName = item.querySelector('.client-name').textContent;
                        if (chatHeader) {
                            chatHeader.innerHTML = `
                                <div class="cliente-info-header">
                                    <img src="${clientImg}" alt="${clientName}">
                                    <h4 id="chatClientName">Cliente: ${clientName}</h4>
                                </div>
                            `;
                        }
                        const badge = document.getElementById(`badge-${clientId}`);
                        if (badge) badge.style.display = 'none';
                    }
                });

                try {
                    const response = await fetch(`/asesor/api/chat/${clientId}`);
                    const data = await response.json();

                    if (data.success) {
                        chatMessagesDiv.innerHTML = ''; // Limpiar mensajes antiguos ANTES de agregar los nuevos
                        if (data.messages.length === 0) {
                            addMessageToChat({
                                senderId: 'initial', // ID ficticio para el mensaje de bienvenida
                                text: `¡Hola <%= asesor.nombre %>! ¿Cómo puedo ayudarte con tus finanzas hoy?`,
                                timestamp: new Date()
                            });
                        } else {
                            data.messages.forEach(msg => addMessageToChat(msg));
                        }
                        chatMessagesDiv.scrollTop = chatMessagesDiv.scrollHeight; // Scroll al final
                    } else {
                        chatMessagesDiv.innerHTML = `<div style="text-align: center; padding: 20px; color: red;">${data.message}</div>`;
                    }
                } catch (error) {
                    console.error('Error al cargar chat:', error);
                    chatMessagesDiv.innerHTML = `<div style="text-align: center; padding: 20px; color: red;">Error al cargar el chat.</div>`;
                }
            }

            clientListDiv.addEventListener('click', (event) => {
                const clientItem = event.target.closest('.client-item');
                if (clientItem) {
                    loadChat(clientItem.dataset.clientId);
                }
            });

            if (sendMessageBtn) {
                sendMessageBtn.addEventListener('click', async () => {
                    const messageText = messageInput.value.trim();
                    if (messageText && currentChatClientId) {
                        try {
                            const now = new Date(); // Genera el timestamp AHORA
                            const localMessage = {
                                senderId: asesorId,
                                senderType: 'asesor',
                                text: messageText,
                                timestamp: now // Usamos este timestamp para el mensaje optimista
                            };
                            console.log('Mensaje local a agregar:', localMessage);
                            addMessageToChat(localMessage); // Añadir el mensaje localmente inmediatamente

                            messageInput.value = '';
                            autoResizeTextarea();
                            chatMessagesDiv.scrollTop = chatMessagesDiv.scrollHeight;

                            const clientItemSidebar = document.querySelector(`.client-item[data-client-id="${currentChatClientId}"] .last-message`);
                            if (clientItemSidebar) {
                                clientItemSidebar.textContent = messageText;
                            }

                            const response = await fetch(`/asesor/api/send-message`, {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify({ 
                                    clienteId: currentChatClientId, 
                                    messageText: messageText,
                                    timestamp: now.toISOString() // ¡ENVÍA EL TIMESTAMP AL BACKEND!
                                })
                            });
                            const data = await response.json();
                            if (!data.success) {
                                console.error('Error al enviar mensaje al backend:', data.message);
                                alert('Error al enviar mensaje: ' + data.message);
                            }
                        } catch (error) {
                            console.error('Error enviando mensaje:', error);
                            alert('Error de conexión al enviar mensaje.');
                        }
                    }
                });

                messageInput.addEventListener('keypress', (e) => {
                    if (e.key === 'Enter' && !e.shiftKey) {
                        e.preventDefault();
                        sendMessageBtn.click();
                    }
                });
            }

            const pollingInterval = 3000;

            async function pollForUpdates() {
                if (currentChatClientId && chatMessagesDiv) {
                    try {
                        const response = await fetch(`/asesor/api/chat/${currentChatClientId}`);
                        const data = await response.json();
                        if (data.success && data.messages) {
                            data.messages.forEach(msg => {
                                // console.log('Mensaje recibido por polling:', msg);
                                addMessageToChat(msg); // addMessageToChat se encargará de la deduplicación
                            });
                            chatMessagesDiv.scrollTop = chatMessagesDiv.scrollHeight;
                        }
                    } catch (error) {
                        console.error('Error en polling de chat:', error);
                    }
                }

                try {
                    const response = await fetch(`/asesor/api/clientes-chat-sidebar`);
                    const data = await response.json();
                    if (data.success) {
                        data.clientes.forEach(updatedClient => {
                            const clientItem = document.querySelector(`.client-item[data-client-id="${updatedClient.id}"]`);
                            if (clientItem) {
                                const lastMessageDiv = clientItem.querySelector('.last-message');
                                if (lastMessageDiv) {
                                    lastMessageDiv.textContent = updatedClient.lastMessage;
                                }
                                let badge = document.getElementById(`badge-${updatedClient.id}`);
                                if (updatedClient.unreadCount > 0 && updatedClient.id !== currentChatClientId) {
                                    if (!badge) {
                                        badge = document.createElement('span');
                                        badge.id = `badge-${updatedClient.id}`;
                                        badge.classList.add('unread-badge');
                                        clientItem.appendChild(badge);
                                    }
                                    badge.textContent = updatedClient.unreadCount;
                                    badge.style.display = 'block';
                                } else {
                                    if (badge) {
                                        badge.style.display = 'none';
                                    }
                                }
                            }
                        });
                    }
                } catch (error) {
                    console.error('Error en polling de sidebar:', error);
                }
            }

            setInterval(pollForUpdates, pollingInterval);

            if (currentChatClientId) {
                const firstClientItem = document.querySelector(`.client-item[data-client-id="${currentChatClientId}"]`);
                if (firstClientItem) {
                    firstClientItem.classList.add('active');
                    const badge = document.getElementById(`badge-${currentChatClientId}`);
                    if (badge) badge.style.display = 'none';
                }
                chatMessagesDiv.scrollTop = chatMessagesDiv.scrollHeight;
            } else {
                if (chatInputArea) chatInputArea.style.display = 'none';
            }

            document.querySelectorAll('.alert .close-btn').forEach(button => {
                button.addEventListener('click', () => {
                    button.closest('.alert').style.display = 'none';
                });
            });
        });
    </script>
</body>
</html>