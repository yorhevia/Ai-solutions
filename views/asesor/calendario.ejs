<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Calendario de Eventos - Asesor</title>
    <link href='https://cdn.jsdelivr.net/npm/fullcalendar@6.1.11/main.min.css' rel='stylesheet' />
        <link href='https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/main.min.css' rel='stylesheet' />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    
    <link rel="stylesheet" href="/stylesheets/style.css"> 
    <link rel="stylesheet" href="/stylesheets/calendario.css"> 
</head>
<body>
    <%- include('../partials/asesor_navbar') %>

    <div class="calendario-page-container">
        <main>
            <h1>Mi Calendario de Eventos</h1>

            <div class="calendario-content">
                <div id="calendar"></div>

                <div class="sidebar">
                    <h2>Próximos Eventos</h2>
                    <ul id="event-list" class="event-list">
                        <li>Cargando eventos...</li>
                    </ul>
                </div>
            </div>
        </main>
    </div>

    <div id="eventModal" class="modal">
        <div class="modal-content">
            <span class="close">&times;</span>
            <h2 id="modalTitle">Agregar Nuevo Evento</h2>
            <form id="eventForm">
                <input type="hidden" id="eventId">
                <div class="form-group">
                    <label for="eventName">Título del Evento:</label>
                    <input type="text" id="eventName" required>
                </div>
                <button type="submit" id="saveEventBtn">Crear Evento</button>
                <button type="button" id="deleteEventBtn" class="delete-btn" style="display: none;">Eliminar Evento</button>
            </form>
        </div>
    </div>

    <%- include('../partials/footer') %>

   <script src='https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/main.min.js'></script>
    <script src='https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/locales/es.js'></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            console.log('DOM Content Loaded. Starting FullCalendar setup...');

            var calendarEl = document.getElementById('calendar');
            var calendar;
            let selectedDate = ''; // Para almacenar la fecha seleccionada al hacer clic en el calendario

            if (!calendarEl) {
                console.error('ERROR: No se encontró el elemento #calendar en el DOM. El calendario no se puede renderizar.');
                return;
            } else {
                console.log('Elemento #calendar encontrado en el DOM.');
            }

            // Referencias a elementos del DOM para el modal y la barra lateral
            const eventModal = document.getElementById('eventModal');
            const modalTitle = document.getElementById('modalTitle');
            const eventIdInput = document.getElementById('eventId');
            const eventNameInput = document.getElementById('eventName');
            const saveEventBtn = document.getElementById('saveEventBtn');
            const deleteEventBtn = document.getElementById('deleteEventBtn');
            const eventForm = document.getElementById('eventForm');
            const eventList = document.getElementById('event-list');

            // --- Funciones para el Modal ---
            function openEventModal(eventId = null, date = '', title = '') {
                console.log('Abriendo modal para evento:', eventId, 'Fecha:', date, 'Título:', title);
                eventNameInput.value = title;
                selectedDate = date; // Guarda la fecha seleccionada o del evento
                eventIdInput.value = eventId;

                if (eventId) {
                    modalTitle.innerText = 'Editar Evento';
                    saveEventBtn.innerText = 'Guardar Cambios';
                    deleteEventBtn.style.display = 'inline-block';
                } else {
                    modalTitle.innerText = 'Agregar Nuevo Evento';
                    saveEventBtn.innerText = 'Crear Evento';
                    deleteEventBtn.style.display = 'none';
                }
                eventModal.classList.add('show-modal');
            }

            function closeEventModal() {
                console.log('Cerrando modal.');
                eventModal.classList.remove('show-modal');
                eventForm.reset();
                selectedDate = ''; // Reinicia la fecha seleccionada
            }

            // Event Listeners para cerrar el modal
            document.querySelector('.modal .close').addEventListener('click', closeEventModal);
            window.onclick = function(event) {
                if (event.target === eventModal) {
                    closeEventModal();
                }
            }

            // --- Inicialización de FullCalendar ---
            console.log('Inicializando FullCalendar...');
            calendar = new FullCalendar.Calendar(calendarEl, {
                initialView: 'dayGridMonth',
                locale: 'es', 
                headerToolbar: {
                    left: 'prev,next today',
                    center: 'title',
                    right: 'dayGridMonth,timeGridWeek,timeGridDay'
                },
                selectable: true,
                selectMirror: true,
                editable: true, // Permite arrastrar y soltar eventos
                events: function(fetchInfo, successCallback, failureCallback) {
                    console.log('FullCalendar: Fetching events from API...');
                    fetch('/asesor/api/eventos')
                        .then(response => {
                            if (!response.ok) {
                                throw new Error(`HTTP error! status: ${response.status} - ${response.statusText}`);
                            }
                            return response.json();
                        })
                        .then(data => {
                            console.log('Eventos recibidos de la API (para FullCalendar):', data);
                            // Mapea los eventos para asegurar que 'start' sea un string ISO (YYYY-MM-DDTHH:mm:ssZ),
                            // especialmente si Firestore devuelve Timestamps o solo fechas.
                            const formattedEvents = data.map(event => {
                                let startDate = event.start;
                                // Si event.start es un objeto Timestamp de Firestore, conviértelo a Date y luego a ISO string.
                                if (startDate && typeof startDate === 'object' && typeof startDate.toDate === 'function') {
                                    startDate = startDate.toDate().toISOString();
                                }
                                // Si es un string YYYY-MM-DD sin hora, FullCalendar lo tratará como allDay
                                // Si incluye hora (ej. YYYY-MM-DDTHH:mm:ssZ), lo tratará como evento con hora.
                                return {
                                    id: event.id,
                                    title: event.title,
                                    start: startDate, 
                                    // FullCalendar asumirá `allDay: true` si 'start' es solo fecha.
                                    // Puedes forzarlo si tienes un campo 'allDay' en tu DB.
                                    allDay: event.allDay === true 
                                };
                            });

                            if (Array.isArray(formattedEvents)) {
                                successCallback(formattedEvents);
                                // Llama a renderEventSidebar con los datos formateados después de que FullCalendar los recibe
                                renderEventSidebar(formattedEvents); 
                            } else {
                                console.error('La API no devolvió un array de eventos o la respuesta es inesperada:', formattedEvents);
                                failureCallback();
                            }
                        })
                        .catch(error => {
                            console.error('Error al cargar eventos del calendario (API):', error);
                            alert('Error al cargar eventos: ' + error.message);
                            failureCallback();
                        });
                },
                // Cuando se hace clic en una fecha del calendario
                dateClick: function(info) {
                    console.log('Date clicked:', info.dateStr);
                    openEventModal(null, info.dateStr, ''); // Abre modal para crear, pasando la fecha
                },
                // Cuando se hace clic en un evento existente en el calendario
                eventClick: function(info) {
                    console.log('Event clicked:', info.event.id, info.event.title);
                    openEventModal(info.event.id, info.event.startStr, info.event.title); // Abre modal para editar
                },
                // Cuando se arrastra y suelta un evento para cambiar su fecha
                eventDrop: function(info) {
                    console.log('Event dropped:', info.event.id, 'New date:', info.event.startStr);
                    const eventId = info.event.id;
                    const newDate = info.event.startStr;
                    const newTitle = info.event.title; // Mantiene el título actual

                    fetch(`/asesor/api/eventos/${eventId}`, {
                        method: 'PUT',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ title: newTitle, date: newDate })
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            console.log('Evento movido exitosamente.');
                            calendar.refetchEvents(); // Refresca el calendario principal
                            fetchAndRenderEventSidebar(); // Refresca el sidebar
                        } else {
                            alert('Error al mover evento: ' + data.message);
                            info.revert(); // Revierte el arrastre si hay error
                        }
                    })
                    .catch(error => {
                        console.error('Error de red al mover evento:', error);
                        alert('Error de red al mover evento.');
                        info.revert();
                    });
                }
            });

            console.log('FullCalendar object created. Attempting to render...');
            calendar.render();
            console.log('FullCalendar render() called.');

            // --- Manejo del Formulario (Crear/Editar) ---
            eventForm.addEventListener('submit', function(e) {
                e.preventDefault();
                const eventId = eventIdInput.value;
                const title = eventNameInput.value;
                const date = selectedDate; // Usa la fecha guardada de la selección/clic

                console.log('Form submitted. Event ID:', eventId, 'Title:', title, 'Date:', date);

                if (!title || !date) { 
                    alert('Por favor, ingresa el título del evento y asegúrate de haber seleccionado una fecha.');
                    return;
                }

                let url, method;
                if (eventId) {
                    url = `/asesor/api/eventos/${eventId}`;
                    method = 'PUT';
                } else {
                    url = '/asesor/api/eventos';
                    method = 'POST';
                }

                fetch(url, {
                    method: method,
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ title, date })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        console.log('Evento guardado exitosamente:', data.message);
                        closeEventModal();
                        calendar.refetchEvents(); // Refresca el calendario
                        fetchAndRenderEventSidebar(); // Refresca el sidebar
                    } else {
                        alert('Error al guardar evento: ' + data.message);
                        console.error('Error al guardar evento:', data.message);
                    }
                })
                .catch(error => {
                    console.error('Error de red al guardar evento:', error);
                    alert('Error de red al guardar evento.');
                });
            });

            // --- Manejo del Botón Eliminar en el Modal ---
            deleteEventBtn.addEventListener('click', function() {
                if (confirm('¿Estás seguro de que quieres eliminar este evento?')) {
                    const eventId = eventIdInput.value;
                    console.log('Attempting to delete event with ID:', eventId);
                    fetch(`/asesor/api/eventos/${eventId}`, { method: 'DELETE' })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            console.log('Evento eliminado exitosamente:', data.message);
                            closeEventModal();
                            calendar.refetchEvents(); // Refresca el calendario
                            fetchAndRenderEventSidebar(); // Refresca el sidebar
                        } else {
                            alert('Error al eliminar: ' + data.message);
                            console.error('Error al eliminar evento:', data.message);
                        }
                    })
                    .catch(error => {
                        console.error('Error de red al eliminar evento:', error);
                        alert('Error de red al eliminar evento.');
                    });
                }
            });

            // --- Función para Renderizar Eventos en la Barra Lateral ---
            function renderEventSidebar(events) {
                console.log('--- Debugging Sidebar Render ---');
                console.log('Rendering sidebar events. Total events received for sidebar:', events.length);
                eventList.innerHTML = ''; // Limpia la lista antes de añadir nuevos elementos

                if (events && events.length > 0) {
                    const now = new Date();
                    now.setHours(0, 0, 0, 0); // Establece 'now' a la medianoche del día actual (00:00:00.000)

                    // Filtra eventos que sean HOY o en el FUTURO y luego ordénalos por fecha
                    const filteredEvents = events.filter(event => {
                        const eventDate = new Date(event.start);
                        
                        if (isNaN(eventDate.getTime())) {
                            console.warn('Fecha de evento inválida detectada para el sidebar (se ignorará):', event.start, 'Evento completo:', event);
                            return false; // Excluye eventos con fechas inválidas
                        }

                        // Normaliza la fecha del evento a medianoche para una comparación de "día completo"
                        eventDate.setHours(0, 0, 0, 0); 
                        
                        // La comparación es 'mayor o igual que la medianoche de hoy'.
                        // Esto incluye eventos de hoy (sin importar la hora) y eventos futuros.
                        const shouldInclude = eventDate >= now;

                        console.log(`Event "${event.title}" (Start: ${event.start}) - Parsed Date (Midnight): ${eventDate.toISOString()} - Is Today/Future: ${shouldInclude}`);
                        return shouldInclude;
                    }).sort((a, b) => new Date(a.start) - new Date(b.start)); // Ordena cronológicamente

                    console.log('Filtered events for sidebar (count):', filteredEvents.length);
                    console.log('Filtered events details (for sidebar):', filteredEvents.map(e => ({ id: e.id, title: e.title, start: e.start })));
                    console.log('--- End Debugging Sidebar Render ---');

                    if (filteredEvents.length > 0) {
                        filteredEvents.forEach(event => {
                            const li = document.createElement('li');
                            const eventDate = new Date(event.start);
                            
                            // Ya validamos arriba, pero aquí es la última oportunidad de parar si algo salió mal
                            if (isNaN(eventDate.getTime())) {
                                console.error('Error al renderizar: Fecha inválida detectada inesperadamente para el evento:', event);
                                return; 
                            }

                            // Formateo de fecha y hora para mostrar al usuario
                            const formattedDate = eventDate.toLocaleDateString('es-VE', { year: 'numeric', month: 'long', day: 'numeric' });
                            
                            // Decide si mostrar la hora: si el string original contiene 'T' o ':' (indicando hora)
                            // Y si la hora parseada no es medianoche (para evitar mostrar 00:00 para eventos de día completo)
                            const hasExplicitTimeComponent = event.start.includes('T') || event.start.includes(':');
                            const isMidnightTime = eventDate.getHours() === 0 && eventDate.getMinutes() === 0 && eventDate.getSeconds() === 0 && eventDate.getMilliseconds() === 0;

                            const formattedTime = (hasExplicitTimeComponent && !isMidnightTime) 
                                                  ? eventDate.toLocaleTimeString('es-VE', { hour: '2-digit', minute: '2-digit' }) 
                                                  : '';

                            li.innerHTML = `
                                <div>
                                    <strong>${event.title}</strong><br>
                                    <small>${formattedDate} ${formattedTime ? '- ' + formattedTime : ''}</small>
                                </div>
                                <div class="event-actions">
                                    <button class="edit-btn" data-id="${event.id}" data-title="${event.title}" data-date="${event.start}">Editar</button>
                                    <button class="delete-btn" data-id="${event.id}">Eliminar</button>
                                </div>
                            `;
                            eventList.appendChild(li);
                        });
                    } else {
                        eventList.innerHTML = '<li>No hay eventos próximos.</li>';
                        console.log('El filtro de fechas dejó el array de eventos próximos vacío.');
                    }

                    // --- Adjuntar Event Listeners para Editar/Eliminar en la Sidebar ---
                    // Es crucial re-adjuntar estos listeners cada vez que se actualiza la lista,
                    // ya que eventList.innerHTML = '' elimina los elementos anteriores y sus listeners.
                    eventList.querySelectorAll('.edit-btn').forEach(button => {
                        button.addEventListener('click', function() {
                            const eventId = this.dataset.id;
                            const eventTitle = this.dataset.title;
                            const eventDate = this.dataset.date;
                            openEventModal(eventId, eventDate, eventTitle);
                        });
                    });

                    eventList.querySelectorAll('.delete-btn').forEach(button => {
                        button.addEventListener('click', function() {
                            if (confirm('¿Estás seguro de que quieres eliminar este evento?')) {
                                const eventId = this.dataset.id;
                                console.log('Attempting to delete event from sidebar with ID:', eventId);
                                fetch(`/asesor/api/eventos/${eventId}`, { method: 'DELETE' })
                                .then(response => response.json())
                                .then(data => {
                                    if (data.success) {
                                        console.log('Evento eliminado desde sidebar. Refetching events.');
                                        calendar.refetchEvents(); // Refresca el calendario principal
                                        fetchAndRenderEventSidebar(); // Refresca el sidebar
                                    } else {
                                        alert('Error al eliminar: ' + data.message);
                                        console.error('Error al eliminar desde sidebar:', data.message);
                                    }
                                })
                                .catch(error => {
                                    console.error('Error de red al eliminar evento desde sidebar:', error);
                                    alert('Error de red al eliminar evento.');
                                });
                            }
                        });
                    });

                } else {
                    eventList.innerHTML = '<li>No hay eventos registrados.</li>'; 
                    console.log('La API no devolvió eventos o el array inicial para el sidebar está vacío.');
                }
            }

            // --- Función para Cargar y Renderizar Eventos en la Barra Lateral (al inicio y refrescos) ---
            function fetchAndRenderEventSidebar() {
                console.log('Initiating fetch for sidebar events...');
                fetch('/asesor/api/eventos')
                    .then(response => {
                        if (!response.ok) {
                            throw new Error(`HTTP error! status: ${response.status} - ${response.statusText}`);
                        }
                        return response.json();
                    })
                    .then(data => {
                        // Mapea y formatea los eventos de la misma manera que FullCalendar
                        const formattedEvents = data.map(event => {
                            let startDate = event.start;
                            if (startDate && typeof startDate === 'object' && typeof startDate.toDate === 'function') {
                                startDate = startDate.toDate().toISOString();
                            }
                            return {
                                id: event.id,
                                title: event.title,
                                start: startDate,
                                allDay: event.allDay === true
                            };
                        });

                        if (Array.isArray(formattedEvents)) {
                            renderEventSidebar(formattedEvents);
                        } else {
                            console.error('La API de eventos no devolvió un array para el sidebar o es inesperada:', formattedEvents);
                        }
                    })
                    .catch(error => {
                        console.error('Error al cargar eventos para el sidebar:', error);
                    });
            }

            // Llama a la función para cargar y renderizar los eventos en el sidebar cuando la página se carga
            // (Esta llamada ya se hace dentro de `events` de FullCalendar, pero la mantenemos aquí por si acaso
            // o para un refresh inicial separado)
            // fetchAndRenderEventSidebar(); 
        });
    </script>
</body>
</html>